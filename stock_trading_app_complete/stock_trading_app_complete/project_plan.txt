CS411 Final ProjectStock Trading Application – Design & PlanningGoals* Allow users to securely create accounts and manage login credentials.* Enable users to simulate buying and selling stocks using real-time market data.* Display users’ portfolios and calculate their total value using up-to-date stock prices.* Retrieve and show detailed stock information from an external API (Alpha Vantage).* Demonstrate the ability to integrate API data, in-memory models, and user auth within a clean, containerized Flask application.Non-goals* Real financial transactions or integration with live brokerages.* Persistent portfolio data (e.g., stored in a SQL database).* Graphical frontend or client-side interactivity.* Support for multiple currencies or global markets.* Sophisticated risk analysis or forecasting tools.Functional Requirements* Allow users to create and manage accounts securely.* Allow users to buy and sell stocks.* View current portfolio with real-time values.* Look up information about a specific stock.* Calculate total portfolio value.* Persist login information in SQLite with hashed passwords.* Store portfolio data in memory.* Use Alpha Vantage API to fetch stock data.* Provide a health check route.Non-Functional Requirements* Security: Passwords must be salted and hashed using a secure algorithm.* RESTful Design: All routes must follow REST conventions (GET, POST, PUT, DELETE).* Reliability: A /healthcheck route must confirm service availability.* Usability: JSON response structure must be consistent, documented, and human-readable.* Maintainability: Code must be modular, well-documented, and follow industry best practices.* Portability: The app must be containerized via Docker for easy deployment.* Testability: The system must include unit tests and a smoke test to verify basic operations.Domain Requirements* Users must interact with stock data using official market symbols (e.g., “AAPL”, “TSLA”).* Stock prices must be pulled from Alpha Vantage, and rate-limiting constraints must be respected.* The portfolio model must simulate ownership and value calculation based on current price ? quantity.* Stocks must be uniquely identified by their market ticker symbols.* The application must differentiate between valid and invalid stock symbols during lookup and trade.User Story: As an individual investor, I want to create an account, look up stock prices, and manage a portfolio so I can make informed investment decisions and track my holdings.Use Cases* Create Account: User provides username and password to register.* Login and Logout: User logs in to access features or logs out.* Look Up Stock: User enters a symbol to view current price and info.* Buy Stock: User buys shares of a given stock.* Sell Stock: User sells shares they own.* View Portfolio: User views their current holdings with prices.* Calculate Portfolio Value: App calculates the current total value.* Health check: App confirms it is running properly.Route List Draft (route: method and purpose)* /create-accounto POSTo Register new user* /logino POSTo Log user in* /logouto POSTo Log user out* /update-passwordo PUTo Update user password* /lookup-stocko GETo Fetch stock data from API* /buy-stocko POSTo Buy stock, update in-memory model* /sell-stocko POSTo Sell stock, update in-memory model* /view-portfolioo GETo View all current holdings* /calculate-portfolio-valueo GETo Sum portfolio value* /healthchecko GETo App status checkTask Breakdown* Backend Setupo Initialize Flask app, SQLite db, folder structureo Create SQLAlchemy user modelo Set up Dockerfile, .env.template, requirements.txt* User Autho Implement /create-account, /login, /logout, /update-passwordo Hash passwords securely, manage sessionso Add unit tests for user routes* Portfolio Model (In-Memory)o Create portfolio_model.py (dict of stock symbols ? shares)o Implement routes: /buy-stock, /sell-stock, /view-portfolioo Add logging for buys/sells* External API Integrationo Use Alpha Vantage APIo Implement /lookup-stocko Handle API key with .envo Add logging for API requests* Portfolio Logico Track purchase prices (optional)o Implement /calculate-portfolio-valueo Add error handling if stock no longer exists* Testing & Docso Unit tests for all routeso Smoke test (app launch + major routes)o README.md with route docs + example requestso Finish Docker + push to GitHub